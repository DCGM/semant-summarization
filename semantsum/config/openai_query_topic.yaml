name: OpenAI Query Multi Topic  # Name of the summarization.
summary_type: query-based multi-document topic summarizer # Summarization type.
provider: openai # Provider of the summarization.
description: Performs query-based multi-document summarization in form of topics. # Description of the summarization.
version: 1.0.0 # Version of the summarization workflow.
recommended_num_texts: 10 # Recommended number of texts for summarization.
summarizer: # Summarizer configuration.
  cls: OpenAIQueryBasedMultiDocSummarizer  # name of class that is subclass of Summarizer
  config: # configuration for defined class
    api:  # OpenAI API configuration.
      api_key:  # OpenAI API key.
      base_url: # Base URL for API.
    model: gpt-4o-mini # Name of model that should be used.
    prompt_builder: # Prompt builder. Available fields are: query, text.
      template: |  # Jinja2 template for prompt sequence. It can be a string, dictionary with keys 'segment_name' and 'template', or a sequence of messages with role and content. If you use dictionary all parts will be concatenated and SegmentedString will be used for the rendered result.
        Identifikuj relevantní témata k dotazu uživatele v následujících získaných výsledcích, poté vytvoř stručný popis identifikovaných témat na základě výsledků vyhledávání a vyhledávacího dotazu. Každý z popisů nemá být delší než 100 slov. Snaž se použít všechny výsledky vyhledávání. Při tvorbě souhrnu se nesoustřeď na detaily, ale pouze na hlavní myšlenky popisující dané téma.
        Použij současnou češtinu, přestože výsledky vyhledávání ji používat nemusí.
        
        Uživatel zadal do vyhledávače historických dokumentů dotaz:
        
        {{query}}
        
        Tento dotaz mu vrátil následující výsledky:
        
        {% for t in text %}Výsledek [{{loop.index}}]: {{t}}
        {% endfor %}
      role_key_form: role # How the dict key would be named in built prompt sequence. Doesn't affect key name in template config.
      content_key_form: content # How the dict key would be named in built prompt sequence. Doesn't affect key name in template config.
    structured: # Structured summary configuration.
      summary_name: topics  # Name of the summary field. (e.g., timeline)
      summary_description: # Description of the summary field.
      sequence_name: topic_list # Name of the sequence field. (e.g., events)
      sequence_description: # Description of the sequence field.
      label_name: topic # Name of the label field. (e.g., time_descriptor)
      label_description: # Description of the label field.
      content_name: summary # Name of the content field. (e.g., summary)
      content_description: # Description of the content field.
    structured_2_str: '{{label}}: {{content}}' # Jinja template for converting item of structured summary to string (available fields: label, content).
